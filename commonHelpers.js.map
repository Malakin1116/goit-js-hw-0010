{"version":3,"file":"commonHelpers.js","sources":["../src/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst daysData = document.querySelector(\"[data-days]\");\nconst hoursData = document.querySelector(\"[data-hours]\");\nconst minutesData = document.querySelector(\"[data-minutes]\");\nconst secondsData = document.querySelector(\"[data-seconds]\");\nconst inputData = document.querySelector(\"#datetime-picker\");\nconst buttonStart = document.querySelector(\"[data-start]\");\n\nbuttonStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      buttonStart.disabled = true;\n    } else {\n      buttonStart.disabled = false;\n      iziToast.success({\n        title: 'Ready',\n        message: 'Ready, press START',\n      });\n    }\n  },\n};\n\nflatpickr(inputData, options);\n\nbuttonStart.addEventListener(\"click\", timerCounter);\n\nfunction timerCounter() {\n  buttonStart.disabled = true;\n  const chosenDate = new Date(inputData.value);\n\n  const interval = setInterval(() => {\n    const timeNow = new Date();\n    let countdownTime = chosenDate - timeNow;\n\n    inputData.disabled = true;\n\n    if (countdownTime <= 0) {\n      clearInterval(interval);\n      inputData.disabled = false;\n\n      iziToast.success({\n        title: 'Timeâ€™s up',\n        message: 'Time has expired',\n      });\n\n      daysData.textContent = '00';\n      hoursData.textContent = '00';\n      minutesData.textContent = '00';\n      secondsData.textContent = '00';\n      return;\n    }\n\n    daysData.textContent = addLeadingZero(Math.floor(countdownTime / 1000 / 60 / 60 / 24));\n    hoursData.textContent = addLeadingZero(Math.floor((countdownTime / 1000 / 60 / 60) % 24));\n    minutesData.textContent = addLeadingZero(Math.floor((countdownTime / 1000 / 60) % 60));\n    secondsData.textContent = addLeadingZero(Math.floor((countdownTime / 1000) % 60));\n  }, 1000);\n}\n\nconst addLeadingZero = value => value.toString().padStart(2, '0');\n"],"names":["daysData","hoursData","minutesData","secondsData","inputData","buttonStart","options","selectedDates","iziToast","flatpickr","timerCounter","chosenDate","interval","countdownTime","addLeadingZero","value"],"mappings":"2GAOA,MAAMA,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,cAAc,EAEzDA,EAAY,SAAW,GAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,GAAK,IAAI,MAC1BC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDH,EAAY,SAAW,KAEvBA,EAAY,SAAW,GACvBG,EAAS,QAAQ,CACf,MAAO,QACP,QAAS,oBACjB,CAAO,EAEJ,CACH,EAEAC,EAAUL,EAAWE,CAAO,EAE5BD,EAAY,iBAAiB,QAASK,CAAY,EAElD,SAASA,GAAe,CACtBL,EAAY,SAAW,GACvB,MAAMM,EAAa,IAAI,KAAKP,EAAU,KAAK,EAErCQ,EAAW,YAAY,IAAM,CAEjC,IAAIC,EAAgBF,EADJ,IAAI,KAKpB,GAFAP,EAAU,SAAW,GAEjBS,GAAiB,EAAG,CACtB,cAAcD,CAAQ,EACtBR,EAAU,SAAW,GAErBI,EAAS,QAAQ,CACf,MAAO,YACP,QAAS,kBACjB,CAAO,EAEDR,EAAS,YAAc,KACvBC,EAAU,YAAc,KACxBC,EAAY,YAAc,KAC1BC,EAAY,YAAc,KAC1B,MACD,CAEDH,EAAS,YAAcc,EAAe,KAAK,MAAMD,EAAgB,IAAO,GAAK,GAAK,EAAE,CAAC,EACrFZ,EAAU,YAAca,EAAe,KAAK,MAAOD,EAAgB,IAAO,GAAK,GAAM,EAAE,CAAC,EACxFX,EAAY,YAAcY,EAAe,KAAK,MAAOD,EAAgB,IAAO,GAAM,EAAE,CAAC,EACrFV,EAAY,YAAcW,EAAe,KAAK,MAAOD,EAAgB,IAAQ,EAAE,CAAC,CACjF,EAAE,GAAI,CACT,CAEA,MAAMC,EAAiBC,GAASA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG"}